[
  {
    "objectID": "utils.io.html",
    "href": "utils.io.html",
    "title": "Utils",
    "section": "",
    "text": "source\n\nsave_txt\n\n save_txt (s, path, append=False)\n\n\nsource\n\n\nopen_txt\n\n open_txt (path)\n\n\nwith tempfile.NamedTemporaryFile() as f:\n    s = 'There is nothing\\nbut\\nprogress\\nto eat'\n    save_txt(s, f.name)\n    s_ = open_txt(f.name)\n    equals(s, s_)\n    \n    #Test append\n    save_txt('\\nnew', f.name, append=True)\n    s_ = open_txt(f.name)\n    equals(s+'\\nnew', s_)\n\n\nsource\n\n\nopen_json\n\n open_json (path)\n\n\nsource\n\n\nsave_json\n\n save_json (d, path)\n\n\nwith tempfile.NamedTemporaryFile() as f:\n    d = {'pita': 'bread', 42: ['elden', 'ring']}\n    save_json(d, f.name)\n    d_ = open_json(f.name)\n    equals(d, d_)\n\n\nsource\n\n\nsave_pickle\n\n save_pickle (o, path)\n\n\nsource\n\n\nopen_pickle\n\n open_pickle (path)\n\n\nwith tempfile.NamedTemporaryFile() as f:\n    s = ['There is nothing', 'but progress', 'to eat']\n    save_pickle(s, f.name)\n    s_ = open_pickle(f.name)\n    equals(s, s_)\n\n\nsource\n\n\nsave_dill\n\n save_dill (o, path)\n\n\nsource\n\n\nopen_dill\n\n open_dill (path)\n\n\nwith tempfile.NamedTemporaryFile() as f:\n    s = ['There is nothing', 'but progress', 'to eat']\n    save_dill(s, f.name)\n    s_ = open_dill(f.name)\n    equals(s, s_)\n\n\nsource\n\n\nmkdir\n\n mkdir (path, exist_ok=False, parents=False, overwrite=False, tmp=False,\n        **kwargs)\n\nCreates and returns a directory defined by path, optionally removing previous existing directory if overwrite is True\n\nwith tempfile.TemporaryDirectory() as d:\n    path = Path(os.path.join(d, 'new_dir'))\n    new_dir = mkdir(path)\n    assert new_dir.exists()\n    test_eq(new_dir, path)\n        \n    # test overwrite\n    with open(new_dir/'test.txt', 'w') as f: f.writelines('test')\n    test_eq(len(list(walk(new_dir))), 1) # assert file is present\n    new_dir = mkdir(new_dir, overwrite=True)\n    test_eq(len(list(walk(new_dir))), 0) # assert file was deleted\n\n\nsource\n\n\nextract_files\n\n extract_files (files, extract_to_dir, show_pbar=True)\n\n\nsource\n\n\nopen_image\n\n open_image (path, gray=False, ignore_exif=True)\n\nOpen an image from disk path as a PIL Image\n\nimage = open_image(pv.test.SEG_IMAGE)\nimage\n\n\n\n\n\n\n\n\n\nsource\n\n\nopen_mask\n\n open_mask (path, gray=True, ignore_exif=True)\n\n\nopen_mask(pv.test.SEG_MASK)\n\n\n\n\n\n\n\n\n\nsource\n\n\nsave_image\n\n save_image (image, path)\n\n\nwith tempfile.TemporaryDirectory() as d:\n    path = Path(d)/'test.png'\n    save_image(image, path)\n    image_ = open_image(path)\n    test_eq(np.array(image), np.array(image_))\n\n\nsource\n\n\nget_files\n\n get_files (path, extensions=None, recurse=True, folders=None,\n            followlinks=True)\n\nGet all the files in path with optional extensions, optionally with recurse, only in folders, if specified. COPIED FROM https://github.com/fastai/fastai/blob/master/nbs/05_data.transforms.ipynb\n\ntest_eq(len(get_files(pv.test.ROOT_DIR/'segmentation', extensions='.png')), 2)\n\n\nsource\n\n\nImageFile\n\n ImageFile (x=None, *args, **kwargs)\n\n*Path subclass for non-Windows systems.\nOn a POSIX system, instantiating a Path should return this object.*\n\nimage_file = ImageFile(str(pv.test.SEG_IMAGE))\nassert isinstance(image_file.parent/'test', ImageFile)\nstr(image_file.parent/'test')\n\n'/home/lgvaz/git/polvo/assets/segmentation/test'\n\n\n\nImageFile(str(pv.test.SEG_IMAGE)).open()\n\n\n\n\n\n\n\n\n\nsource\n\n\nget_image_files\n\n get_image_files (path, recurse=True, folders=None)\n\nGet image files in path recursively, only in folders, if specified. COPIED FROM https://github.com/fastai/fastai/blob/master/nbs/05_data.transforms.ipynb\n\ntest_eq(len(get_image_files(pv.test.ROOT_DIR/'segmentation')), 2)\n\n\nsource\n\n\nglob_match\n\n glob_match (dirpath, matches:Sequence[str], recursive=True)\n\n\nglob_match(pv.test.ROOT_DIR, ['*.png'])\n\n[Path('/home/lgvaz/git/polvo/assets/polvo.png'),\n Path('/home/lgvaz/git/polvo/assets/segmentation/mask1.png'),\n Path('/home/lgvaz/git/polvo/assets/segmentation/image1.png')]\n\n\n\nglob_match(pv.test.ROOT_DIR, ['*.png'], recursive=False)\n\n[Path('/home/lgvaz/git/polvo/assets/polvo.png')]\n\n\n\nsource\n\n\nRenderDict\n\n RenderDict (json_data)\n\nFrom https://www.reddit.com/r/IPython/comments/34t4m7/lpt_print_json_in_collapsible_format_in_ipython/\n\nRenderDict({'h1': {'h2.1': [1, 2, 3, 4], 'h2.2': 'a'}})",
    "crumbs": [
      "API",
      "Utils",
      "Utils"
    ]
  },
  {
    "objectID": "data.core.html",
    "href": "data.core.html",
    "title": "Data",
    "section": "",
    "text": "source\n\nComponent\n\n Component ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nLabel\n\n Label (id, name)\n\nInitialize self. See help(type(self)) for accurate signature."
  },
  {
    "objectID": "visitor.core.html",
    "href": "visitor.core.html",
    "title": "Visitor Core",
    "section": "",
    "text": "source\n\nVisitor\n\n Visitor ()\n\nInitialize self. See help(type(self)) for accurate signature."
  },
  {
    "objectID": "converter.yolo.html",
    "href": "converter.yolo.html",
    "title": "Yolo converter.",
    "section": "",
    "text": "source\n\nYOLO\n\n YOLO ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\nimport polvo.bbox as pb\n\n\nimage_file = pv.ImageFile(str(pv.test.SEG_IMAGE))\nclass_map = {0: 'a', 1: 'b'}\nlabels = [pv.Label(i, class_map[i]) for i in [0, 1, 1, 0]]\nbboxes = [pb.BBox.from_xyxy(20, 20, 64, 280),\n          pb.BBox.from_xywh(10, 72, 478, 72),\n          pb.BBox.from_relative_xcycwh(.4, .4, .7, .6, 512, 300),\n          pb.OBBox.from_clockwise(256,175, 100,140, 80)]\n\nbboxesl = [pb.BBoxLabeled(bbox, label) for bbox, label in pv.safe_zip(bboxes, labels)]\n\n\nrecord = [image_file, *bboxesl]\nconverter = YOLO()\n# converter.convert_record(record)\n\n\nconverter.convert_dataset(pv.mkdir('tmp/yolo', parents=True, overwrite=True), class_map,\n                          train=[record]*2,\n                          valid=[record]*3,\n                          test=[record]*2,)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconverter.yolo_yaml(class_map, Path('root_dir'), Path('root_dir/train_dir'))\n\n'path: /home/lgvaz/git/polvo/nbs/root_dir\\ntrain: train_dir\\nnames:\\n  0: a\\n  1: b'"
  },
  {
    "objectID": "utils.visualization.html",
    "href": "utils.visualization.html",
    "title": "Visualization",
    "section": "",
    "text": "/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/fastcore/docscrape.py:230: UserWarning: Unknown section See Also\n  else: warn(msg)\n\nsource\n\nshow_image\n\n show_image (image, ax=None, cmap=None, show:bool=False, nrows:int=1,\n             ncols:int=1,\n             sharex:\"bool|Literal['none','all','row','col']\"=False,\n             sharey:\"bool|Literal['none','all','row','col']\"=False,\n             squeeze:bool=True, width_ratios:Sequence[float]|None=None,\n             height_ratios:Sequence[float]|None=None,\n             subplot_kw:dict[str,Any]|None=None,\n             gridspec_kw:dict[str,Any]|None=None)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nimage\n\n\n\n\n\nax\nNoneType\nNone\n\n\n\ncmap\nNoneType\nNone\n\n\n\nshow\nbool\nFalse\n\n\n\nnrows\nint\n1\n\n\n\nncols\nint\n1\n\n\n\nsharex\nbool | Literal[‘none’, ‘all’, ‘row’, ‘col’]\nFalse\n\n\n\nsharey\nbool | Literal[‘none’, ‘all’, ‘row’, ‘col’]\nFalse\n\n\n\nsqueeze\nbool\nTrue\n- If True, extra dimensions are squeezed out from the returned array of ~matplotlib.axes.Axes: - if only one subplot is constructed (nrows=ncols=1), the resulting single Axes object is returned as a scalar. - for Nx1 or 1xM subplots, the returned object is a 1D numpy object array of Axes objects. - for NxM, subplots with N&gt;1 and M&gt;1 are returned as a 2D array.- If False, no squeezing at all is done: the returned Axes object is always a 2D array containing Axes instances, even if it ends up being 1x1.\n\n\nwidth_ratios\nSequence[float] | None\nNone\nDefines the relative widths of the columns. Each column gets arelative width of width_ratios[i] / sum(width_ratios).If not given, all columns will have the same width. Equivalentto gridspec_kw={'width_ratios': [...]}.\n\n\nheight_ratios\nSequence[float] | None\nNone\nDefines the relative heights of the rows. Each row gets arelative height of height_ratios[i] / sum(height_ratios).If not given, all rows will have the same height. Conveniencefor gridspec_kw={'height_ratios': [...]}.\n\n\nsubplot_kw\ndict[str, Any] | None\nNone\nDict with keywords passed to the~matplotlib.figure.Figure.add_subplot call used to create eachsubplot.\n\n\ngridspec_kw\ndict[str, Any] | None\nNone\nDict with keywords passed to the ~matplotlib.gridspec.GridSpecconstructor used to create the grid the subplots are placed on.\n\n\n\n\ndata_dir = pv.mkdir('snacks', tmp=True, exist_ok=True, overwrite=True)\ndata_dir = pv.download_and_extract('https://github.com/lgvaz/polvo-datasets-hub/releases/download/snacks/snacks.zip', data_dir)\nimage_files = pv.get_image_files(data_dir)\n\n\n\n\n\nimage = pv.open_image(image_files[4])\n\n\nshow_image(image)\n\n\n\n\n\n\n\n\n\nsource\n\n\nget_grid\n\n get_grid (nitems=None, ncols=3, nrows=None, pad=0.3, figsize=None,\n           grid_class=&lt;class 'mpl_toolkits.axes_grid1.axes_grid.Grid'&gt;,\n           ngrids=None, direction='row', axes_pad=0.02, share_all=False,\n           share_x=True, share_y=True, label_mode='L', axes_class=None,\n           aspect=False)\n\nCreates axes optimized for displaying images.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nnitems\nNoneType\nNone\n\n\n\nncols\nint\n3\n\n\n\nnrows\nNoneType\nNone\n\n\n\npad\nfloat\n0.3\n\n\n\nfigsize\nNoneType\nNone\n\n\n\ngrid_class\ntype\nGrid\n\n\n\nngrids\nNoneType\nNone\nIf not None, only the first ngrids axes in the grid are created.\n\n\ndirection\nstr\nrow\nWhether axes are created in row-major (“row by row”) orcolumn-major order (“column by column”). This also affects theorder in which axes are accessed using indexing (grid[index]).\n\n\naxes_pad\nfloat\n0.02\nPadding or (horizontal padding, vertical padding) between axes, ininches.\n\n\nshare_all\nbool\nFalse\nWhether all axes share their x- and y-axis. Overrides share_xand share_y.\n\n\nshare_x\nbool\nTrue\nWhether all axes of a column share their x-axis.\n\n\nshare_y\nbool\nTrue\nWhether all axes of a row share their y-axis.\n\n\nlabel_mode\nstr\nL\nDetermines which axes will get tick labels:- “L”: All axes on the left column get vertical tick labels; all axes on the bottom row get horizontal tick labels.- “1”: Only the bottom left axes is labelled.- “all”: All axes are labelled.- “keep”: Do not do anything.\n\n\naxes_class\nNoneType\nNone\nThe type of Axes to create.\n\n\naspect\nbool\nFalse\nWhether the axes aspect ratio follows the aspect ratio of the datalimits.\n\n\n\n\nsource\n\n\nget_image_grid\n\n get_image_grid (nitems=None, ncols=3, nrows=None, pad=0.0, figsize=None,\n                 grid_class=&lt;class\n                 'mpl_toolkits.axes_grid1.axes_grid.Grid'&gt;, ngrids=None,\n                 direction='row', axes_pad=0.02, share_all=False,\n                 share_x=True, share_y=True, label_mode='L',\n                 axes_class=None, aspect=False)\n\nCreates axes optimized for displaying images.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nnitems\nNoneType\nNone\n\n\n\nncols\nint\n3\n\n\n\nnrows\nNoneType\nNone\n\n\n\npad\nfloat\n0.0\n\n\n\nfigsize\nNoneType\nNone\n\n\n\ngrid_class\ntype\nGrid\n\n\n\nngrids\nNoneType\nNone\nIf not None, only the first ngrids axes in the grid are created.\n\n\ndirection\nstr\nrow\nWhether axes are created in row-major (“row by row”) orcolumn-major order (“column by column”). This also affects theorder in which axes are accessed using indexing (grid[index]).\n\n\naxes_pad\nfloat\n0.02\nPadding or (horizontal padding, vertical padding) between axes, ininches.\n\n\nshare_all\nbool\nFalse\nWhether all axes share their x- and y-axis. Overrides share_xand share_y.\n\n\nshare_x\nbool\nTrue\nWhether all axes of a column share their x-axis.\n\n\nshare_y\nbool\nTrue\nWhether all axes of a row share their y-axis.\n\n\nlabel_mode\nstr\nL\nDetermines which axes will get tick labels:- “L”: All axes on the left column get vertical tick labels; all axes on the bottom row get horizontal tick labels.- “1”: Only the bottom left axes is labelled.- “all”: All axes are labelled.- “keep”: Do not do anything.\n\n\naxes_class\nNoneType\nNone\nThe type of Axes to create.\n\n\naspect\nbool\nFalse\nWhether the axes aspect ratio follows the aspect ratio of the datalimits.\n\n\n\n\nsource\n\n\nshow_grid\n\n show_grid (grid, shows, show=True)\n\n\nsource\n\n\nnormalize_axes\n\n normalize_axes (grid, xmax, ymax)\n\nExpand all axes to have the same dimensions.\n\nsource\n\n\nplot_grid\n\n plot_grid (shows, show=True, xmax=None, ymax=None, ncols=3, nrows=None,\n            pad=0.0, figsize=None, grid_class=&lt;class\n            'mpl_toolkits.axes_grid1.axes_grid.Grid'&gt;, ngrids=None,\n            direction='row', axes_pad=0.02, share_all=False, share_x=True,\n            share_y=True, label_mode='L', axes_class=None, aspect=False)\n\nQuickly plot a grid of images.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nshows\n\n\n\n\n\nshow\nbool\nTrue\n\n\n\nxmax\nNoneType\nNone\n\n\n\nymax\nNoneType\nNone\n\n\n\nncols\nint\n3\n\n\n\nnrows\nNoneType\nNone\n\n\n\npad\nfloat\n0.0\n\n\n\nfigsize\nNoneType\nNone\n\n\n\ngrid_class\ntype\nGrid\n\n\n\nngrids\nNoneType\nNone\nIf not None, only the first ngrids axes in the grid are created.\n\n\ndirection\nstr\nrow\nWhether axes are created in row-major (“row by row”) orcolumn-major order (“column by column”). This also affects theorder in which axes are accessed using indexing (grid[index]).\n\n\naxes_pad\nfloat\n0.02\nPadding or (horizontal padding, vertical padding) between axes, ininches.\n\n\nshare_all\nbool\nFalse\nWhether all axes share their x- and y-axis. Overrides share_xand share_y.\n\n\nshare_x\nbool\nTrue\nWhether all axes of a column share their x-axis.\n\n\nshare_y\nbool\nTrue\nWhether all axes of a row share their y-axis.\n\n\nlabel_mode\nstr\nL\nDetermines which axes will get tick labels:- “L”: All axes on the left column get vertical tick labels; all axes on the bottom row get horizontal tick labels.- “1”: Only the bottom left axes is labelled.- “all”: All axes are labelled.- “keep”: Do not do anything.\n\n\naxes_class\nNoneType\nNone\nThe type of Axes to create.\n\n\naspect\nbool\nFalse\nWhether the axes aspect ratio follows the aspect ratio of the datalimits.\n\n\n\n\nsource\n\n\nimage_grid\n\n image_grid (images, *args, show=True, xmax=None, ymax=None, ncols=3,\n             nrows=None, pad=0.0, figsize=None, grid_class=&lt;class\n             'mpl_toolkits.axes_grid1.axes_grid.Grid'&gt;, ngrids=None,\n             direction='row', axes_pad=0.02, share_all=False,\n             share_x=True, share_y=True, label_mode='L', axes_class=None,\n             aspect=False)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nimages\n\n\n\n\n\nargs\n\n\n\n\n\nshow\nbool\nTrue\n\n\n\nxmax\nNoneType\nNone\n\n\n\nymax\nNoneType\nNone\n\n\n\nncols\nint\n3\n\n\n\nnrows\nNoneType\nNone\n\n\n\npad\nfloat\n0.0\n\n\n\nfigsize\nNoneType\nNone\n\n\n\ngrid_class\ntype\nGrid\n\n\n\nngrids\nNoneType\nNone\nIf not None, only the first ngrids axes in the grid are created.\n\n\ndirection\nstr\nrow\nWhether axes are created in row-major (“row by row”) orcolumn-major order (“column by column”). This also affects theorder in which axes are accessed using indexing (grid[index]).\n\n\naxes_pad\nfloat\n0.02\nPadding or (horizontal padding, vertical padding) between axes, ininches.\n\n\nshare_all\nbool\nFalse\nWhether all axes share their x- and y-axis. Overrides share_xand share_y.\n\n\nshare_x\nbool\nTrue\nWhether all axes of a column share their x-axis.\n\n\nshare_y\nbool\nTrue\nWhether all axes of a row share their y-axis.\n\n\nlabel_mode\nstr\nL\nDetermines which axes will get tick labels:- “L”: All axes on the left column get vertical tick labels; all axes on the bottom row get horizontal tick labels.- “1”: Only the bottom left axes is labelled.- “all”: All axes are labelled.- “keep”: Do not do anything.\n\n\naxes_class\nNoneType\nNone\nThe type of Axes to create.\n\n\naspect\nbool\nFalse\nWhether the axes aspect ratio follows the aspect ratio of the datalimits.\n\n\n\n\nimage_grid(map(pv.open_image, image_files[:3]))\n\n\n\n\n\n\n\n\n(&lt;Figure size 1400x400 with 6 Axes&gt;,\n &lt;mpl_toolkits.axes_grid1.axes_grid.ImageGrid&gt;)\n\n\n\nsource\n\n\nshow_images\n\n show_images (images, *args, show=True, xmax=None, ymax=None, ncols=3,\n              nrows=None, pad=0.0, figsize=None, grid_class=&lt;class\n              'mpl_toolkits.axes_grid1.axes_grid.Grid'&gt;, ngrids=None,\n              direction='row', axes_pad=0.02, share_all=False,\n              share_x=True, share_y=True, label_mode='L', axes_class=None,\n              aspect=False)\n\nSame as image_grid\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nimages\n\n\n\n\n\nargs\n\n\n\n\n\nshow\nbool\nTrue\n\n\n\nxmax\nNoneType\nNone\n\n\n\nymax\nNoneType\nNone\n\n\n\nncols\nint\n3\n\n\n\nnrows\nNoneType\nNone\n\n\n\npad\nfloat\n0.0\n\n\n\nfigsize\nNoneType\nNone\n\n\n\ngrid_class\ntype\nGrid\n\n\n\nngrids\nNoneType\nNone\nIf not None, only the first ngrids axes in the grid are created.\n\n\ndirection\nstr\nrow\nWhether axes are created in row-major (“row by row”) orcolumn-major order (“column by column”). This also affects theorder in which axes are accessed using indexing (grid[index]).\n\n\naxes_pad\nfloat\n0.02\nPadding or (horizontal padding, vertical padding) between axes, ininches.\n\n\nshare_all\nbool\nFalse\nWhether all axes share their x- and y-axis. Overrides share_xand share_y.\n\n\nshare_x\nbool\nTrue\nWhether all axes of a column share their x-axis.\n\n\nshare_y\nbool\nTrue\nWhether all axes of a row share their y-axis.\n\n\nlabel_mode\nstr\nL\nDetermines which axes will get tick labels:- “L”: All axes on the left column get vertical tick labels; all axes on the bottom row get horizontal tick labels.- “1”: Only the bottom left axes is labelled.- “all”: All axes are labelled.- “keep”: Do not do anything.\n\n\naxes_class\nNoneType\nNone\nThe type of Axes to create.\n\n\naspect\nbool\nFalse\nWhether the axes aspect ratio follows the aspect ratio of the datalimits.\n\n\n\n\nsource\n\n\ngrid_from_sequence\n\n grid_from_sequence (sequence, get_image, nitems=9, idxs=None, show=True,\n                     xmax=None, ymax=None, ncols=3, nrows=None, pad=0.0,\n                     figsize=None, grid_class=&lt;class\n                     'mpl_toolkits.axes_grid1.axes_grid.Grid'&gt;,\n                     ngrids=None, direction='row', axes_pad=0.02,\n                     share_all=False, share_x=True, share_y=True,\n                     label_mode='L', axes_class=None, aspect=False)\n\nGenerates a grid of images from a subset of items from the sequence.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsequence\n\n\n\n\n\nget_image\n\n\n\n\n\nnitems\nint\n9\n\n\n\nidxs\nNoneType\nNone\n\n\n\nshow\nbool\nTrue\n\n\n\nxmax\nNoneType\nNone\n\n\n\nymax\nNoneType\nNone\n\n\n\nncols\nint\n3\n\n\n\nnrows\nNoneType\nNone\n\n\n\npad\nfloat\n0.0\n\n\n\nfigsize\nNoneType\nNone\n\n\n\ngrid_class\ntype\nGrid\n\n\n\nngrids\nNoneType\nNone\nIf not None, only the first ngrids axes in the grid are created.\n\n\ndirection\nstr\nrow\nWhether axes are created in row-major (“row by row”) orcolumn-major order (“column by column”). This also affects theorder in which axes are accessed using indexing (grid[index]).\n\n\naxes_pad\nfloat\n0.02\nPadding or (horizontal padding, vertical padding) between axes, ininches.\n\n\nshare_all\nbool\nFalse\nWhether all axes share their x- and y-axis. Overrides share_xand share_y.\n\n\nshare_x\nbool\nTrue\nWhether all axes of a column share their x-axis.\n\n\nshare_y\nbool\nTrue\nWhether all axes of a row share their y-axis.\n\n\nlabel_mode\nstr\nL\nDetermines which axes will get tick labels:- “L”: All axes on the left column get vertical tick labels; all axes on the bottom row get horizontal tick labels.- “1”: Only the bottom left axes is labelled.- “all”: All axes are labelled.- “keep”: Do not do anything.\n\n\naxes_class\nNoneType\nNone\nThe type of Axes to create.\n\n\naspect\nbool\nFalse\nWhether the axes aspect ratio follows the aspect ratio of the datalimits.\n\n\n\n\ngrid_from_sequence(image_files, lambda x: pv.open_image(x), nitems=3)\n\n\n\n\n\n\n\n\n(&lt;Figure size 1400x400 with 6 Axes&gt;,\n &lt;mpl_toolkits.axes_grid1.axes_grid.ImageGrid&gt;)\n\n\n\nsource\n\n\nimage_size\n\n image_size (image_file)\n\n\nsource\n\n\nimage_sizes_hist\n\n image_sizes_hist (image_files)\n\nPlot a histogram of widths and heights.\n\n\n\n\nDetails\n\n\n\n\nimage_files\nSequence of image filepaths.\n\n\n\n\nimage_sizes_hist(image_files)"
  },
  {
    "objectID": "utils.download.html",
    "href": "utils.download.html",
    "title": "Download",
    "section": "",
    "text": "source\n\ndownload\n\n download (url, save_dir, filename=None, chunk_size=1024)\n\nDownload file from url\n\nsource\n\n\ndownload_and_extract\n\n download_and_extract (url, save_dir, chunk_size=1024)\n\n\nwith TemporaryDirectory() as d:\n    download_and_extract('https://s3.amazonaws.com/fast-ai-sample/mnist_tiny.tgz', d)\n\n\n\n\n\nsource\n\n\ndownload_gdrive\n\n download_gdrive (url)\n\nDownload from gdrive, passing virus scan for big files.\n\nsource\n\n\ndownload_and_extract_gdrive\n\n download_and_extract_gdrive (url, extract_dir)\n\n\nsource\n\n\nopen_image_url\n\n open_image_url (url, gray=False, ignore_exif=True)\n\n\nimg = open_image_url('https://media.istockphoto.com/id/177228186/pt/foto/jovem-capivara.jpg?s=612x612&w=0&k=20&c=HIaHC5JhfE3zobczCLIEY6bdy2NdOLq0sskZkuXsM9w=')\npv.show_image(img)",
    "crumbs": [
      "API",
      "Utils",
      "Download"
    ]
  },
  {
    "objectID": "segmentation.vis.html",
    "href": "segmentation.vis.html",
    "title": "Visualization",
    "section": "",
    "text": "source\n\noverlay_mask\n\n overlay_mask (image:&lt;module'PIL.Image'from'/opt/hostedtoolcache/Python/3.\n               10.14/x64/lib/python3.10/site-packages/PIL/Image.py'&gt;, mask\n               :&lt;module'PIL.Image'from'/opt/hostedtoolcache/Python/3.10.14\n               /x64/lib/python3.10/site-packages/PIL/Image.py'&gt;,\n               nclasses:int, cmap:matplotlib.colors.Colormap=&lt;matplotlib.c\n               olors.LinearSegmentedColormap object at 0x7fda4e2f0cd0&gt;,\n               alpha:float=0.5)\n\n\nimage = pv.open_image(pv.test.SEG_IMAGE)\nmask = pv.open_mask(pv.test.SEG_MASK)\n\n\noverlay_mask(image, mask, 105)"
  },
  {
    "objectID": "utils.image_size.html",
    "href": "utils.image_size.html",
    "title": "Get image size",
    "section": "",
    "text": "import polvo as pv\nfrom fastcore.all import *\n\n/home/lgvaz/git/polvo/polvo/utils/logging.py:8: TqdmExperimentalWarning: Using `tqdm.autonotebook.tqdm` in notebook mode. Use `tqdm.tqdm` instead to force console mode (e.g. in jupyter console)\n  from tqdm.autonotebook import tqdm\n\n\n\nsource\n\nUnknownImageFormat\nCommon base class for all non-exit exceptions.\n\nsource\n\n\nImage\n\n Image (path, type, file_size, width, height)\n\n\nsource\n\n\nget_image_metadata_from_bytesio\n\n get_image_metadata_from_bytesio (input, size, file_path=None)\n\n*Return an Image object for a given img file content - no external dependencies except the os and struct builtin modules\nArgs: input (io.IOBase): io object support read & seek size (int): size of buffer in byte file_path (str): path to an image file\nReturns: Image: (path, type, file_size, width, height)*\n\nsource\n\n\nget_image_metadata\n\n get_image_metadata (file_path)\n\n*Return an Image object for a given img file content - no external dependencies except the os and struct builtin modules\nArgs: file_path (str): path to an image file\nReturns: Image: (path, type, file_size, width, height)*\n\nsource\n\n\nimage_size_from_bytesio\n\n image_size_from_bytesio (input, size)\n\n*Return (width, height) for a given img file content - no external dependencies except the os and struct builtin modules\nArgs: input (io.IOBase): io object support read & seek size (int): size of buffer in byte*\n\nsource\n\n\nimage_size\n\n image_size (file_path)\n\nReturn (width, height) for a given img file content - no external dependencies except the os and struct builtin modules\n\ntest_eq(image_size(pv.test.SEG_IMAGE), (500, 332))"
  },
  {
    "objectID": "utils.logging.html",
    "href": "utils.logging.html",
    "title": "Logging",
    "section": "",
    "text": "source\n\npbar\n\n pbar (*args, show=True, total=None, **kwargs)\n\n\nfor _ in pbar(range(10)): sleep(0.01)",
    "crumbs": [
      "API",
      "Utils",
      "Logging"
    ]
  },
  {
    "objectID": "utils.splits.html",
    "href": "utils.splits.html",
    "title": "Splits",
    "section": "",
    "text": "source\n\nrandom\n\n random (items, probs, seed=None)\n\n\nrandom(list(range(10)), [0.8, 0.1, 0.1])\n\n[[6, 9, 3, 5, 7, 1, 4, 2], [8], [0]]\n\n\n\nsource\n\n\nfrom_fn\n\n from_fn (items, fn)\n\nfn should return the index for each subset\n\nfrom_fn(list(range(10)), lambda x: 0 if x&gt;4 else 1)\n\n([5, 6, 7, 8, 9], [0, 1, 2, 3, 4])"
  },
  {
    "objectID": "utils.script.html",
    "href": "utils.script.html",
    "title": "Script",
    "section": "",
    "text": "source\n\ncall_parse\n\n call_parse (func=None, nested=False)\n\nDecorator to create a simple CLI from func using anno_parser Copied from: https://github.com/fastai/fastcore/blob/master/fastcore/script.py with a single change (marked by comment)\n\nsource\n\n\ntest_script\n\n test_script (msg:param(('Themessage',&lt;class'str'&gt;),{}), upper:param(('Con\n              verttouppercase?',&lt;functionstore_trueat0x7f133fceb5b0&gt;),{})=\n              False)\n\nPrint msg, optionally converting to uppercase\n\ntest_eq(test_script('test'), 'test')"
  },
  {
    "objectID": "draw.pil_drawer.html",
    "href": "draw.pil_drawer.html",
    "title": "PIL Drawer",
    "section": "",
    "text": "source\n\nPILDrawer\n\n PILDrawer ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\nrecords = [pv.ImageFile(str(pv.test.SEG_IMAGE)),\n           pb.BBox.from_xyxy(20, 20, 64, 280),\n           pb.BBoxLabeled(pb.BBox.from_xywh(10, 72, 478, 72), pv.Label(0, 'test')),\n           pb.BBox.from_relative_xcycwh(.4, .4, .7, .6, 512, 300),\n           pb.OBBox.from_clockwise(256,175, 100,140, 80),\n           pb.BBoxLabeled(pb.OBBox.from_clockwise(124,58, 50,78, 42), pv.Label(1, 'tree'))]\n\n\ndrawer = PILDrawer()\ndrawer.draw(records)"
  },
  {
    "objectID": "classification.explorer.html",
    "href": "classification.explorer.html",
    "title": "Explorer",
    "section": "",
    "text": "data_dir = pv.mkdir('snacks', tmp=True, exist_ok=True, overwrite=True)\ndata_dir = pv.download_and_extract('https://github.com/lgvaz/polvo-datasets-hub/releases/download/snacks/snacks.zip', data_dir)\n\n\n\n\n\nimage_files = pv.get_image_files(data_dir)\n\n\nimage_file = image_files[25]\npv.open_image(image_file)\n\n\n\n\n\n\n\n\n\nsource\n\nDataExplorer\n\n DataExplorer (label_ids, idx2image, id2label, label2id)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nlabel_ids = []\nlabel2id = defaultdict(lambda: len(label2id))\nfor imgf in image_files:\n    label = imgf.parent.stem\n    label_ids.append(label2id[label])\n    \nlabel2id = dict(label2id)\nid2label = {v: k for k, v in label2id.items()}\n\n\ndef idx2image(idx): return pv.open_image(image_files[idx])\nexp = DataExplorer(label_ids, idx2image, id2label.__getitem__, label2id.__getitem__)\n\n\nexp.most_common()\n\n\n\n\n\n\n\n\nlabel_id\nlabel\nitem_idx\nn_samples\n\n\n\n\n0\n0\ncake\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n10\n\n\n1\n1\nhot-dog\n[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n10\n\n\n2\n2\nice-cream\n[20, 21, 22, 23, 24, 25, 26, 27, 28, 29]\n10\n\n\n\n\n\n\n\n\nexp.show_label_id(0, slice_=slice(3, 6))\n\n\n\n\n\n\n\n\n(&lt;Figure size 1400x400 with 6 Axes&gt;,\n &lt;mpl_toolkits.axes_grid1.axes_grid.ImageGrid&gt;)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to Polvo",
    "section": "",
    "text": "Polvo is a collection of computer vision tools that I find helpful for my personal workflow.\n\nMaybe some can be helpful for you too!\n\nInstall\npip install polvo\n\n\nHow to use\nNot much to see here yet. Check the API docs!",
    "crumbs": [
      "Welcome to Polvo"
    ]
  },
  {
    "objectID": "utils.misc.html",
    "href": "utils.misc.html",
    "title": "Miscellaneous",
    "section": "",
    "text": "source\n\nflatten\n\n flatten (x)\n\nFrom https://stackoverflow.com/a/2158532/6772672\n\ntest_eq(flatten([[2, 3], ['a', ['c', 4]]]), [2, 3, 'a', 'c', 4])\n\n\nsource\n\n\nsort_quadrilateral\n\n sort_quadrilateral (points)\n\n\ntest_points = np.array([(1.8, 2.1), (2, 0.9), (1.1, 1.95), (1, 1)])\nexpected_points = np.array([(1, 1), (2, 0.9), (1.8, 2.1), (1.1, 1.95)])\nexpected_idxs = np.array([3, 1, 0, 2])\ntest_eq(sort_quadrilateral(test_points), (expected_points, expected_idxs))\n\n\ntest_points = np.array([[1368.4, 1856.], [270.5, 1815.3], [1436.6, 77.7], [340.2, 27.5]])\nexpected_points = np.array([[340.2, 27.5], [1436.6, 77.7], [1368.4, 1856.], [270.5, 1815.3]])\nexpected_idxs = np.array([3, 2, 0, 1])\ntest_eq(sort_quadrilateral(test_points), (expected_points, expected_idxs))\n\n\nsource\n\n\nkwargs_grid\n\n kwargs_grid (**kwargs)\n\nReturns a generator with all combinations of kwargs\n\nlist(kwargs_grid(size=[(224, 224), (512, 512)], alpha=[0.3, 0.7, 0.9], apply_tfms=[False, True]))\n\n[{'size': (224, 224), 'alpha': 0.3, 'apply_tfms': False},\n {'size': (224, 224), 'alpha': 0.3, 'apply_tfms': True},\n {'size': (224, 224), 'alpha': 0.7, 'apply_tfms': False},\n {'size': (224, 224), 'alpha': 0.7, 'apply_tfms': True},\n {'size': (224, 224), 'alpha': 0.9, 'apply_tfms': False},\n {'size': (224, 224), 'alpha': 0.9, 'apply_tfms': True},\n {'size': (512, 512), 'alpha': 0.3, 'apply_tfms': False},\n {'size': (512, 512), 'alpha': 0.3, 'apply_tfms': True},\n {'size': (512, 512), 'alpha': 0.7, 'apply_tfms': False},\n {'size': (512, 512), 'alpha': 0.7, 'apply_tfms': True},\n {'size': (512, 512), 'alpha': 0.9, 'apply_tfms': False},\n {'size': (512, 512), 'alpha': 0.9, 'apply_tfms': True}]\n\n\n\n\n\nzip\nzip(iterables, strict=False) –&gt; Yield tuples until an input is exhausted.\n\n\n\nlist(zip(‘abcdefg’, range(3), range(4))) [(‘a’, 0, 0), (‘b’, 1, 1), (‘c’, 2, 2)]\n\n\n\nThe zip object yields n-length tuples, where n is the number of iterables passed as positional arguments to zip(). The i-th element in every tuple comes from the i-th iterable argument to zip(). This continues until the shortest argument is exhausted.\nIf strict is true and one of the arguments is exhausted before the others, raise a ValueError.*\n\ntest_eq(list(safe_zip([1, 2], [3, 4], [5, 6])), list(zip([1, 2], [3, 4], [5, 6])))\n\n\ntest_fail(lambda: safe_zip([1, 2], [3, 4], [5]), contains='same size')\n\n\nsource\n\n\nskip_error\n\n skip_error (fn, log=True)\n\nReturns the error instead of raising it.\n\nskip_error(lambda: 'test'.get(2))()\n\n'str' object has no attribute 'get' ((), {})\n\n\nAttributeError(\"'str' object has no attribute 'get'\")\n\n\n\nsource\n\n\nCache\n\n Cache (func, save_dir=None, debug=False)\n\nInitialize self. See help(type(self)) for accurate signature.\n\ncache = Cache(lambda x: x+1, debug=True)\ncache.get('test_cache.pkl', x=4, use_cache=True)\n\nUsing cache.\n\n\n5\n\n\n\ncache.list_cached()\n\n(#6) [Path('/home/lgvaz/.cache/polvo/test_cache444.pkl'),Path('/home/lgvaz/.cache/polvo/OpenAIEncoder-the_loop_manual_de_regras_em_portugues_211955.pdf-chunks.pkl'),Path('/home/lgvaz/.cache/polvo/test_cache.pkl'),Path('/home/lgvaz/.cache/polvo/test_cache2.pkl'),Path('/home/lgvaz/.cache/polvo/test_cache'),Path('/home/lgvaz/.cache/polvo/OpenAIEncoder/the_loop_manual_de_regras_em_portugues_211955.pdf-embeds.pkl')]\n\n\n\nsource\n\n\ntransparent_cmap\n\n transparent_cmap ()\n\n\n# FIND CORRECT PLACE TO PLACE THIS\ndef wandb_upload(project:str, artifact_name:str, *path:str, type='dataset'):\n    \"Uploads files or dir to wandb\"\n    import wandb\n    run = wandb.init(project=project, job_type=\"data-upload\")\n    artifact = wandb.Artifact(artifact_name, type=type)\n    \n    def _add_file(p): artifact.add_file(p, p)\n    for p in path:\n        if Path(p).is_file(): _add_file(p)\n        else:\n            for f in pv.get_files(p): _add_file(f)\n\n    run.log_artifact(artifact)\n\n\nclass ParameterIterator:\n    def __call__(self, f):\n        sig = inspect.signature(f)\n        @functools.wraps(f)\n        def wrapper(*args, **kwargs):\n            bound = sig.bind(*args, **kwargs)\n            for k, v in bound.arguments.items():\n                self.apply(k, v)\n            return f(*args, **kwargs)\n        return wrapper\n\n\ndef _save_image(image, save_dir): return pv.save_image(image, save_dir)\n\nclass save_params(ParameterIterator):\n    _save_fns = {\n        Image: pv.save_image,\n        np.ndarray: pv.save_image,\n        numbers.Number: lambda s: pv.save_txt(s+'\\n', append=True),\n        str: lambda s: pv.save_txt(s+'\\n', append=True),\n    }\n    \n    def __init__(\n        self,\n        save_dir,\n        save_fns=None, # Dictionary of {&lt;type&gt;: save_fn}. `save_fn` first parameter should be the object, and second the path.\n    ):\n        \"Save all parameters of decorated function\"\n        self.save_dir = pv.mkdir(save_dir, exist_ok=True)\n        self.save_fns = save_fns or self._save_fns.copy()\n        \n    def apply(self, k, v):\n        save_fns[type(k)](v, self.save_dir)\n\n\n# @save_params('foo_params')\n# def foo(a, b, c=2, d='test'):\n#     return\n\n\nsource\n\n\npartial\n\n partial (func, *args, **kwargs)\n\nWraps functools.partial, same functionality. Modifies the original partial __repr__ and __str__.\n\nsource\n\n\nrandom_local_seed\n\n random_local_seed (seed)"
  },
  {
    "objectID": "bbox.core.html",
    "href": "bbox.core.html",
    "title": "BBox Core",
    "section": "",
    "text": "#TODO: With points sorted, xmax,ymin, etc can be directly indexed\n\n\nsource\n\nBBox\n\n BBox (points)\n\n*Bounding Box representation. Should not be instantiated directly, instead use from_* methods. e.g. from_xyxy, from_xywh. Is able to transform coordinates into different formats, e.g. xyxy, xywh.\n\n\nExamples\nCreate from xywh format, and get xyxy coordinates.\nbbox = BBox.from_xywh(1, 1, 4, 4)\nxyxy = bbox.xyxy\n```*\n\n\n::: {#49df8410 .cell}\n``` {.python .cell-code}\nbbox = BBox.from_xyxy(1, 2, 3, 4)\n\ntest_eq(bbox.xyxy, (1, 2, 3, 4))\ntest_eq(bbox.yxyx, (2, 1, 4, 3))\ntest_eq(bbox.xywh, (1, 2, 2, 2))\n:::\n\ntest_eq(bbox.normalized_points(10, 8), ((0.1,0.25), (0.3,0.25), (0.3,0.5), (0.1,0.5)))\n\n\nbbox = BBox.from_xywh(10, 72, 478, 72)\ntest_eq(bbox.xyxy, (10, 72, 10+478, 72+72))\n\n\nw, h = 640, 480\nxcycwh = (0.7, 0.2, 0.1, 0.2)\nbbox = BBox.from_relative_xcycwh(*xcycwh, img_width=w, img_height=h)\n\ntest_eq(bbox.xyxy, (416, 48, 480, 144))\ntest_close(bbox.relative_xcycwh(img_width=w, img_height=h), xcycwh)\n\n\nsource\n\nOBBox\n\n OBBox (points)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nobbox1 = OBBox.from_flat((60,20, 60,120, 10,120, 10,20)) # non-rotated\ntest_eq(obbox1.points, np.array(((10,20), (60,20), (60,120), (10, 120))))\n\n\nobbox2 = OBBox.from_clockwise(60,20, 100,50, math.degrees(math.asin(4/5))) #rotated \nobbox3 = OBBox.from_flat((60,20, 120,100, 80,130, 20,50)) # rotated \ntest_close(obbox2.points, obbox3.points)\n\n\nsource\n\n\nBBoxLabeled\n\n BBoxLabeled (bbox, label)\n\nInherit from this to have all attr accesses in self._xtra passed down to self.default\n\nlabel = pv.Label(0, 'test')\nbbox = BBox.from_xyxy(20, 20, 64, 280)\nBBoxLabeled(bbox, label)\n\n0: test | &lt;BBox (xmin:20, ymin:20, xmax:64, ymax:280)&gt;\n\n\n\nsource\n\n\nOBBoxLabeled\n\n OBBoxLabeled (bbox, label)\n\nInherit from this to have all attr accesses in self._xtra passed down to self.default\n\nobbox = OBBox.from_flat((60,20, 120,100, 80,130, 20,50))\nOBBoxLabeled(obbox, label)\n\n0: test | &lt;OBBox ([[ 20  50]\n [ 60  20]\n [120 100]\n [ 80 130]])&gt;"
  },
  {
    "objectID": "utils.wandb.html",
    "href": "utils.wandb.html",
    "title": "Miscellaneous",
    "section": "",
    "text": "source\n\nWandbRun\n\n WandbRun (run=None, **kwargs)\n\nContext manager that finishes run when exiting\n\nsource\n\n\nwandb_upload\n\n wandb_upload (artifact_name:str, *path:str, project=None, type='dataset',\n               run=None)\n\nUploads files or dir to wandb\n\nwith WandbRun(project='test', job_type='test') as run:\n    wandb_upload('test_upload', '01v_utils.wandb.ipynb', run=run)\n\nwandb: Currently logged in as: agscard. Use `wandb login --relogin` to force relogin\n\n\nwandb version 0.15.0 is available!  To upgrade, please run:\n $ pip install wandb --upgrade\n\n\nTracking run with wandb version 0.14.2\n\n\nRun data is saved locally in /home/lgvaz/git/polvo/nbs/wandb/run-20230424_153328-dqy4wcia\n\n\nSyncing run icy-waterfall-1 to Weights & Biases (docs)\n\n\n View project at https://wandb.ai/agscard/test\n\n\n View run at https://wandb.ai/agscard/test/runs/dqy4wcia\n\n\nWaiting for W&B process to finish... (success).\n\n\n View run icy-waterfall-1 at: https://wandb.ai/agscard/test/runs/dqy4wciaSynced 5 W&B file(s), 0 media file(s), 1 artifact file(s) and 0 other file(s)\n\n\nFind logs at: ./wandb/run-20230424_153328-dqy4wcia/logs"
  },
  {
    "objectID": "bbox.vis.html",
    "href": "bbox.vis.html",
    "title": "Visualization",
    "section": "",
    "text": "source\n\noverlay\n\n overlay (image:&lt;module'PIL.Image'from'/opt/hostedtoolcache/Python/3.10.14\n          /x64/lib/python3.10/site-packages/PIL/Image.py'&gt;,\n          bbox:polvo.bbox.core.BBox, color:Tuple[int,int,int]=None)\n\nDraws a box on an image with a given color. # Arguments image : The image to draw on. box : A list of 4 elements (x1, y1, x2, y2). color : The color of the box.\n\nimage = PIL.Image.fromarray(np.zeros((300, 512, 3), dtype=np.uint8))\nimage = overlay(image, BBox.from_xyxy(20, 20, 64, 280), (100, 100, 255))\nimage = overlay(image, BBox.from_xywh(10, 72, 478, 72), color=(100, 200, 155))\nimage = overlay(image, BBox.from_relative_xcycwh(.4, .4, .7, .6, 512, 300))\npv.show_image(image)\n\n\n\n\n\n\n\n\n\nimage = PIL.Image.fromarray(np.zeros((200, 200, 3), dtype=np.uint8))\nimage = overlay(image, OBBox.from_flat((60,20, 60,120, 10,120, 10,20))) # non-rotated\nimage = overlay(image, OBBox.from_clockwise(60,20, 100,50, math.degrees(math.asin(4/5)))) #rotated \nimage = overlay(image, OBBox.from_flat((60,20, 120,100, 80,130, 20,50))) # rotated \npv.show_image(image)\n\n\n\n\n\n\n\n\n\nimage = PIL.Image.fromarray(np.zeros((350, 512, 3), dtype=np.uint8))\nimage = overlay(image, OBBox.from_clockwise(256,175, 100,140, 0), (250, 200, 155))\nimage = overlay(image, OBBox.from_clockwise(256,175, 100,140, 180), (250, 200, 155))\nimage = overlay(image, OBBox.from_clockwise(256,175, 100,140, 20), (100, 200, 155))\nimage = overlay(image, OBBox.from_clockwise(256,175, 100,140, 80), (100, 200, 155))\nimage = overlay(image, OBBox.from_clockwise(256,175, 100,140, 120), (100, 200, 155))\nimage = overlay(image, OBBox.from_clockwise(256,175, 100,140, -20), (200, 100, 155))\nimage = overlay(image, OBBox.from_clockwise(256,175, 100,140, -60), (200, 100, 155))\nimage = overlay(image, OBBox.from_clockwise(256,175, 100,140, -120), (200, 100, 155))\npv.show_image(image)\n\n\n\n\n\n\n\n\n\nsource\n\n\noverlay_label\n\n overlay_label (image, label, x, y, color=None, font=None, padding=0)\n\n\nimage = PIL.Image.fromarray(np.zeros((100, 200, 3), dtype=np.uint8))\nimage = overlay(image, BBox.from_xyxy(20, 20, 64, 64))\nimage = overlay_label(image, 'test', 20, 20)\nimage\n\n\n\n\n\n\n\n\n\nsource\n\n\noverlay_bbox_labelled\n\n overlay_bbox_labelled (image, bbox, color=None, font=None, padding=0)\n\n\nimage = PIL.Image.fromarray(np.zeros((100, 200, 3), dtype=np.uint8))\nbbox = BBoxLabeled(BBox.from_xyxy(20, 20, 64, 64), pv.Label(1, 'test'))\nimage = overlay_bbox_labelled(image, bbox)\nimage"
  },
  {
    "objectID": "datasets.download.html",
    "href": "datasets.download.html",
    "title": "Datasets",
    "section": "",
    "text": "source\n\nsnacks_tiny\n\n snacks_tiny ()\n\n\ndata_dir = snacks_tiny()"
  }
]