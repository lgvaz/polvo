# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/25f_converter.yolo.ipynb.

# %% auto 0
__all__ = ['YOLO']

# %% ../../nbs/25f_converter.yolo.ipynb 3
from fastcore.all import *
import shutil
import polvo as pv

# %% ../../nbs/25f_converter.yolo.ipynb 4
class YOLO(pv.Visitor):
    def convert_dataset(self, save_dir, train_records=None, valid_records=None, test_records=None):
        save_dir = Path(save_dir)
        if train_records: self.convert_records(pv.mkdir(save_dir/'train'), train_records)
        if valid_records: self.convert_records(pv.mkdir(save_dir/'valid'), valid_records)
        if test_records: self.convert_records(pv.mkdir(save_dir/'test'), test_records)
        
    def convert_records(self, save_dir, records):
        for record in pv.pbar(records): self.convert_record(save_dir, record)
        
    def convert_record(self, save_dir, record):
        image_dir = pv.mkdir(Path(save_dir)/'images')
        ann_dir = pv.mkdir(Path(save_dir)/'labels')
        
        self._labels, self._bboxes = [], []
        self.visit_all(record)
        lines = [' '.join(o) for o in pv.safe_zip(self._labels, self._bboxes)]
        pv.save_txt('\n'.join(lines), ann_dir/self._image_file.with_suffix('.txt').name)
        shutil.copy(self._image_file.absolute(), image_dir/self._image_file.name)
    
    def _visit_image_file(self, image_file): 
        self._w,self._h = pv.image_size(image_file)
        self._image_file = image_file
    
    def _visit_bbox_labelled(self, bbox):
        self._labels.append(str(bbox.label.id))
        points = bbox.normalized_points(self._w,self._h).flatten()
        self._bboxes.append(' '.join(map(str, points)))
