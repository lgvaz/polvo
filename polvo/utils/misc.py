# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/01t_utils.misc.ipynb.

# %% auto 0
__all__ = ['flatten', 'kwargs_grid', 'safe_zip', 'skip_error', 'Cache']

# %% ../../nbs/01t_utils.misc.ipynb 2
from fastcore.all import *
import numbers
import polvo as pv

from PIL import Image

# %% ../../nbs/01t_utils.misc.ipynb 3
def flatten(x):
    "From https://stackoverflow.com/a/2158532/6772672"
    if isinstance(x, Iterable) and not isinstance(x, (str, bytes)): 
        return [a for i in x for a in flatten(i)]
    else: return [x]

# %% ../../nbs/01t_utils.misc.ipynb 5
def kwargs_grid(**kwargs):
    "Returns a generator with all combinations of kwargs"
    return (dict(zip(kwargs.keys(), v)) for v in itertools.product(*kwargs.values()))

# %% ../../nbs/01t_utils.misc.ipynb 7
@functools.wraps(zip)
def safe_zip(*args, **kwargs):
    if len(set(map(len, args))) not in (0, 1):
        raise ValueError(f'All elements should have the same size, but got {[len(x) for x in args]}')
    return zip(*args, **kwargs)

# %% ../../nbs/01t_utils.misc.ipynb 10
class skip_error:
    def __init__(self, fn, log=True):
        'Returns the error instead of raising it.'
        store_attr()
        
    def __call__(self, *args, **kwargs):
        try: return self.fn(*args, **kwargs)
        except Exception as e: 
            if self.log: print((args, kwargs))
            return e

# %% ../../nbs/01t_utils.misc.ipynb 12
class Cache:
    def __init__(self, func, save_dir=None):
        self.func = func
        self.save_dir = Path(save_dir or Path.home()/'.cache/polvo')
        
    def get(self, name, use_cache=True):
        path = self.save_dir/name
        try: 
            if use_cache: return pv.open_pickle(path)
        except FileNotFoundError: 
            pass
        
        x = self.func()
        pv.mkdir(path.parent, exist_ok=True)
        pv.save_pickle(x, path)
        return x
