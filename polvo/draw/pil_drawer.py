# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/20f_draw.pil_drawer.ipynb.

# %% auto 0
__all__ = ['Visitor', 'PILDrawer']

# %% ../../nbs/20f_draw.pil_drawer.ipynb 3
from fastcore.all import *
import polvo as pv
import polvo.bbox as pb

# %% ../../nbs/20f_draw.pil_drawer.ipynb 4
class Visitor:
    # separating the drawing functions from its call allows us to pass custom arguments to each item
    def collect_accept_fns(self, record):
        return [item.accept_visit(self) for item in record]
    
    def execute_accept_fns(self, fns, kwargs_list=None):
        kwargs_list = kwargs_list or [{} for _ in fns]
        for fn, kwargs in zip(fns, kwargs_list): fn(**kwargs)
        
    def visit_all(self, record, kwargs_list=None):
        fns = self.collect_accept_fns(record)
        return self.execute_accept_fns(fns, kwargs_list=kwargs_list)
    
    def visit_image_file(self, image_file, **kwargs): return partial(self._visit_image_file, image_file, **kwargs)
    def visit_bbox(self, bbox, **kwargs): return partial(self._visit_bbox, bbox, **kwargs)
    def visit_bbox_labelled(self, bbox, **kwargs): return partial(self._visit_bbox_labelled, bbox, **kwargs)

# %% ../../nbs/20f_draw.pil_drawer.ipynb 5
class PILDrawer(Visitor):
    def draw(self, record, image=None, kwargs_list=None):
        self._image = image
        self.visit_all(record, kwargs_list=kwargs_list)
        return self._image
    
    def _visit_image_file(self, image_file, **kwargs): self._image = image_file.open(**kwargs)
    def _visit_bbox(self, bbox, **kwargs): self._image = pb.overlay(bbox=bbox, image=self._image, **kwargs)
    def _visit_bbox_labelled(self, bbox, **kwargs): self._image = pb.overlay_bbox_labelled(bbox=bbox, image=self._image, **kwargs)
