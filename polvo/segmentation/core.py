# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/03_segmentation.core.ipynb.

# %% auto 0
__all__ = ['SegmentationExplorer']

# %% ../../nbs/03_segmentation.core.ipynb 3
#TODO: optimize imports
from fastai.vision.all import *
from ..core import *

# %% ../../nbs/03_segmentation.core.ipynb 18
class SegmentationExplorer:
    def __init__(self, x_tl, y_tl, label_id2name):
        self.x_tl = x_tl
        self.y_tl = y_tl
        
        label_stats = []

        for item_idx, y in enumerate(y_tl):
            labels, counts = np.unique(y, return_counts=True)
            total = counts.sum()
            label_stats.extend([{'item_idx': item_idx,
                                 'label_id': l,
                                 'pct': c / total,
                                 'count': c,
                                 'label': label_id2name[l]} 
                                for l, c in zip(labels, counts)])
        
        grouped_y = pd.DataFrame(label_stats)
        grouped_y = grouped_y.groupby("label_id").agg({'label': 'first',
                                                       'item_idx': list,
                                                       'pct': list,
                                                       'count': sum}).reset_index()
        grouped_y["n_samples"] = grouped_y.item_idx.str.len()
        grouped_y = grouped_y.sort_values("count", ascending=False).reset_index(drop=True)
        self.grouped_y = grouped_y

    # TODO: Most common pixels and most common samples
    def most_common(self):
        "Return a dataframe ordered by most common classes."
        return self.grouped_y

    def show_label_id(self, id, slice_=slice(None)):
        # TODO: can we also pick the class name to show?
        idx = self.grouped_y[self.grouped_y["label_id"] == id].index[0]
        return self.show_most_common(idx=idx, slice_=slice_)
    
    def show_label(self, label, slice_=slice(None)):
        return self.show_label_id(self.label2id[label], slice_=slice_)

    def show_most_common(self, idx: int, slice_=slice(None)):
        idxs = self.grouped_y.iloc[idx].item_idx
        idxs = idxs[slice_]
        
        images = [self.x_tl[i] for i in idxs]
        shows = [image.show for image in images]
        xmax, ymax = np.max([image.size for image in images], axis=0)
        
        return image_grid(shows, xmax=xmax, ymax=ymax)
    
    @classmethod
    def from_datasets(cls, dss, label_id2name):
        return cls(dss.tls[0], dss.tls[1], label_id2name)
